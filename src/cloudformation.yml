Parameters:
  EnvironmentParameter:
    Type: String
    Default: dev
    AllowedValues:
      - dev
      - prod

  CertificateArnParameter:
    Type: String
    Default: arn:aws:acm:us-east-1:758881537981:certificate/dc6174a9-ef18-43b3-8b18-c252284d0891

Mappings:
  URLMap:
    dev:
      URL: dev.scotuslink.com
      Zone: dev.scotuslink.com.
      Edge: d1tkp7wrgzbag4.cloudfront.net
    prod:
      URL: scotuslink.com
      Zone: scotuslink.com.
      Edge: d8rqxfm44ppdi.cloudfront.net

Resources:
  # code
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Join ["-", ["LambdaExecutionRole", !Ref EnvironmentParameter]]
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: "CloudwatchLogging"
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: "logs:CreateLogGroup"
                Resource: "*"
              - Effect: Allow
                Action:
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: "*"

  RedirectLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Join ["-", ["redirect-lambda", !Ref EnvironmentParameter]]
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: "nodejs8.10"
      Code:
        ZipFile: !Sub |
            'use strict';

            // http://blog.ryangreen.ca/2016/01/04/how-to-http-redirects-with-api-gateway-and-lambda/
             
            exports.handler = function(event, context) {
                const URL_TEMPLATE = "https://cdn.loc.gov/service/ll/usrep/usrep{{volume}}/usrep{{volume}}{{page}}/usrep{{volume}}{{page}}.pdf";
                var volume = event['volume'];
                var page = event['page'];
                var url = URL_TEMPLATE.replace(/{{volume}}/g, volume).replace(/{{page}}/g, page);
                
                console.log( "redirecting to " + url);
                context.succeed({
                    location: url
                });
            };

  # api
  RedirectAPI:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Join ["-", ["RedirectAPI", !Ref EnvironmentParameter]]
      FailOnWarnings: true
      Body:
        openapi: 3.0.1
        info:
          title: Redirect API
          description: URL redirect for Supreme Court opinions
          version: 0.0.1
          contact:
            name: Alex Gallichotte
          license:
            name: TBD
            url: TBD
        components:
          schemas:
            Empty:
              type: "object"
        paths:
          /:
            get:
              responses:
                "200":
                  description: "200 response"
                  content:
                    text/html:
                      schema:
                        $ref: "#/components/schemas/Empty"
              x-amazon-apigateway-integration:
                type: "mock"
                responses:
                  default:
                    statusCode: "200"
                    responseTemplates:
                      text/html: "<title>scotuslink.com</title><h1>Supreme Court Opinion URL Shortener</h1><p>Volume: <input id=v value=542> Page: <input id=p value=692></p><a href=https://scotuslink.com/542/692 id=l target=_blank><h2 id=t>https://scotuslink.com/542/692</h2></a><script src=https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js></script><script>$(\"input\").change(function(){var t=\"https://scotuslink.com/\"+$(\"#v\").val()+\"/\"+$(\"#p\").val();$(\"#t\").html(t),$(\"#l\").attr(\"href\",t)})</script>"
                requestTemplates:
                  application/json: "{\"statusCode\": 200}"
                passthroughBehavior: "when_no_match"

          /{volume}/{page}:
            get:
              parameters:
                - name: volume
                  in: path
                  required: true
                  schema:
                    type: string
                - name: page
                  in: path
                  required: true
                  schema:
                    type: string
              responses:
                "200":
                  description: "200 response"
                  headers: {}
                "302":
                  description: "302 response"
                  headers:
                    Location:
                      schema:
                        type: string
              x-amazon-apigateway-integration:
                type: "aws"
                uri: !Join ["/", ["arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions", !GetAtt RedirectLambda.Arn, "invocations"]]
                responses:
                  default:
                    statusCode: "302"
                    responseParameters:
                      method.response.header.Location: "integration.response.body.location"
                passthroughBehavior: "when_no_match"
                httpMethod: "POST"
                requestTemplates:
                  application/json: "{\"volume\": \"$input.params('volume')\", \"page\": \"$input.params('page')\"}"

  RedirectLambdaPermission:
    Type:  AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt RedirectLambda.Arn
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RedirectAPI}/*"

  RedirectAPIDeployment:
    Type: AWS::ApiGateway::Deployment
    Properties:
      RestApiId: !Ref RedirectAPI
      StageName: api

  # dns
  APIDomainName:
    Type: AWS::ApiGateway::DomainName
    Properties:
      DomainName: !FindInMap [URLMap, !Ref EnvironmentParameter, URL]
      CertificateArn: !Ref CertificateArnParameter

  APIMapping:
    Type: AWS::ApiGateway::BasePathMapping
    Properties:
      DomainName: !FindInMap [URLMap, !Ref EnvironmentParameter, URL]
      RestApiId: !Ref RedirectAPI
      Stage: api

  DNSHostedZone:
    Type: AWS::Route53::HostedZone
    Properties:
      Name: !FindInMap [URLMap, !Ref EnvironmentParameter, URL]
  
  DNSRecordSet:
    Type: AWS::Route53::RecordSet
    Properties:
      AliasTarget:
        # us-east-1 https://docs.aws.amazon.com/general/latest/gr/rande.html#apigateway_region
        HostedZoneId: Z2FDTNDATAQYW2
        DNSName: !FindInMap [URLMap, !Ref EnvironmentParameter, Edge]
      HostedZoneName: !FindInMap [URLMap, !Ref EnvironmentParameter, Zone]
      Name: !FindInMap [URLMap, !Ref EnvironmentParameter, URL]
      Type: A

